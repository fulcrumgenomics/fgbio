/*
 * The MIT License
 *
 * Copyright (c) 2025 Fulcrum Genomics LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.fulcrumgenomics.umi

import com.fulcrumgenomics.FgBioDef._
import com.fulcrumgenomics.bam.api.SamRecord
import com.fulcrumgenomics.testing.SamBuilder.{Minus, Plus}
import com.fulcrumgenomics.testing.{SamBuilder, UnitSpec}
import com.fulcrumgenomics.umi.DuplexConsensusCaller.DuplexConsensusRead
import com.fulcrumgenomics.util.Sequences
import org.scalatest.OptionValues

import scala.util.Random

class CodecConsensusCallerTest extends UnitSpec with OptionValues {
  // Sequence to make reads from; each line is exactly 100 bases long
  private val RefBases = Seq(
    "TGGGTGTTGTTTGGGTTCCTGCTTAAAGAGCTACTGTTCTTCACAGAAACTTCCAACTCACCCAGACTGAGATTTGTACTGAGACTACGATCCACATGTT",
    "CAATATCTGATATCTGATGGGAAATAGGCTTTACTGAATTATCCATTTGGGCTGTAATTAATTTCAGTGATGAGCGGGAGATGTTGTTAGTTGTGCTCAG",
    "TAACTTTTTGATAGTAGCGGGAGTAGGAGTAAATCTTGTACTAATTAGTGAATATTCTGTTGATGGTGGCTGAAAATTTATAGCTACACAACCAAAAAAT",
    "AAAAAACGTTAGTCAATAGCATTTATAAATAGTCTTCTCTACCTGAAATATTTTACATTAAGTAATTCATTCCTTCATTTAGTATCTACACATGTCTAAC",
    "ATTGTAGTAGGAGCTGTGTACTAACAAGAAATCATGACACTGTTTCTGCCTTCAAGGAGCTTATAATCTTTTGGGGTACACAAGATAACCCAGAATGTTA",
    "AATAGTATAAAAGTCAAAGTACAATAATTTATTTCATTAAGATTTTGAAATGGCTAACAAACACCTGTTGATCACCTCATACACATGAGCCTCAAAACAA",
    "AGGAAAGCACAGCCCCTATGCCTGAGCAATTTAGAATATTGTCAAGGATAGAGACATGTGAGCCATTCACTATGAAACAATCATTGAGAACTACTACAAG",
    "AGTGATAAATATAAAATGAAACCTACAGAAACACAGAAGAGTAAGTAATTTTCCCTATAAAGAAGACAGGAACTAAATGTATAAGCAAAAATTGGGAAAT",
    "TATATAAATGCTATTTTATATGAGAGGCAAAGAACCACAGGTCTAATAATTTTACAAATGTGATAAAATCAGATTTTATGTCCCCATCTTTCTTGACTGC",
    "TCAGCTAGAAATTAAAACATTTTTACACATCTTTTTGGCGGGGGCGGGGGGGATCATTATTTATTTCACCTGCCAAAATACTTCATTTCCTTATTGCACT",
    "TTTTTACTTCTTTGGTATGGAAAAATCTAACGGGTTTTAGAGTATGAACACATTTTAAGCAGTGATTAGATACGTTTTTCTTGTTATGCTTTCTATTGCA",
    "AATTTAGGATTTGATTTTGCACTGTCTTCATGCAAAGCTCTTCTCAAAGGTCTTAAAATATAAAAAACACTTAATGCTTCTCAAAGCATTAAGATTTTAT",
    "GTAAATCAAACCAAAACCAGAAAAAGACAGAAGAAAATGAACCAAAAACAACAAAAATAATCCTTAACATAGTTGGCAACAAGTGCAATGAAAGATTTTT",
  ).mkString

  private val random = new Random()

  /** Adds a random sequence of the requested length to the provided StringBuilder.  */
  private def addRandomSequence(sb: StringBuilder, length: Int): Unit = {
    forloop (from=0, until=length) { _ =>
      val base = RefBases(random.nextInt(RefBases.length))
      sb.append(base)
    }
  }

  /** Takes a SamRecord generated by a SamBuilder and sets a valid read sequence on it from RefBases
    * based on the position on the record.
    */
  private def setReadSequence(rec: SamRecord): Unit = {
    val sb = new StringBuilder()
    var offset = rec.start - 1
    rec.cigar.iterator.foreach { elem =>
      if (elem.operator.consumesReadBases()) {
        if (elem.operator.consumesReferenceBases()) {
          sb.append(RefBases.substring(offset, offset + elem.length))
        }
        else {
          addRandomSequence(sb, elem.length)
        }
      }

      if (elem.operator.consumesReferenceBases()) {
        offset += elem.length
      }
    }

    rec.bases = sb.toString()
  }

  /** Create a duplex consensus read for testing purposes. */
  private def duplex(length: Int): DuplexConsensusRead = {
    val bases   = ("A" * length).getBytes
    val quals   = Array.fill(length)(90.toByte)
    val ssQuals = Array.fill(length)(45.toByte)
    DuplexConsensusRead(
      id="codec-read",
      bases = bases,
      quals = quals,
      errors = Array.fill(length)(0),
      abConsensus = VanillaConsensusRead(
        id="codec-read/A",
        bases=bases.clone(),
        quals=ssQuals.clone(),
        depths=Array.fill(length)(2),
        errors=Array.fill(length)(0)
      ),
      baConsensus = Some(VanillaConsensusRead(
        id="codec-read/B",
        bases=bases.clone(),
        quals=ssQuals.clone(),
        depths=Array.fill(length)(2),
        errors=Array.fill(length)(0)
      ))
    )
  }

  "CodecConsensusCaller.consensusSamRecordsFromSamRecords" should "make a consensus from two simple reads" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller  = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val raw     = builder.addPair(contig=0, start1=1, start2=11, attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))).tapEach(setReadSequence)
    val cons    = caller.consensusReadsFromSamRecords(raw)

    cons should have length 1
    cons.head.name shouldBe "codec:hi"
    cons.head.length shouldBe 40
    cons.head.basesString shouldBe RefBases.substring(0, 40)
    cons.head[String](ConsensusTags.UmiBases) shouldBe "ACC-TGA"
  }

  it should "make a consensus where R1 has a deletion outside of the overlap region" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller  = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val raw     = builder.addPair(
      contig=0, start1=1, start2=13, cigar1="5M2D25M", cigar2="30M", attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)
    val cons    = caller.consensusReadsFromSamRecords(raw)

    cons.head.length shouldBe 40
    cons.head.basesString shouldBe (RefBases.substring(0, 5) + RefBases.substring(7, 42))
    cons.head[String](ConsensusTags.UmiBases) shouldBe "ACC-TGA"
  }

  it should "make a consensus where R2 has a deletion outside of the overlap region" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller  = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val raw     = builder.addPair(
      contig=0, start1=1, start2=11, cigar1="30M", cigar2="25M5D5M", attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)
    val cons    = caller.consensusReadsFromSamRecords(raw)

    cons.head.length shouldBe 40
    cons.head.basesString shouldBe (RefBases.substring(0, 35) + RefBases.substring(40, 45))
    cons.head[String](ConsensusTags.UmiBases) shouldBe "ACC-TGA"
  }

  it should "make a consensus where the reads have soft-clipping outside of the overlap region" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller  = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val raw     = builder.addPair(
      contig=0, start1=1, start2=11, cigar1="5S25M", cigar2="25M5S", attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)
    val cons    = caller.consensusReadsFromSamRecords(raw)

    cons.head.length shouldBe 45
    cons.head.basesString shouldBe raw.head.basesString.substring(0, 5) + RefBases.substring(0, 35) + raw.last.basesString.substring(25, 30)
    cons.head[String](ConsensusTags.UmiBases) shouldBe "ACC-TGA"
  }

  it should "make a consensus where both reads are soft-clipped at the same end and fully overlapped" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller  = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val raw     = builder.addPair(
      contig=0, start1=1, start2=1, cigar1="5S25M", cigar2="5S25M", attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)
    raw.last.bases = raw.head.basesString // Make sure they have the same soft-clipped sequence
    val cons    = caller.consensusReadsFromSamRecords(raw)

    cons.head.length shouldBe 30
    cons.head.basesString shouldBe raw.head.basesString.substring(0, 5) + RefBases.substring(0, 25)
    cons.head[String](ConsensusTags.UmiBases) shouldBe "ACC-TGA"
  }

  it should "emit the consensus in the orientation of R1" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller  = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val raw     = builder.addPair(
      contig=0, start1=11, start2=1, strand1=Minus, strand2=Plus, attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)
    val cons    = caller.consensusReadsFromSamRecords(raw)

    cons should have length 1
    cons.head.name shouldBe "codec:hi"
    cons.head.length shouldBe 40
    cons.head.basesString shouldBe Sequences.revcomp(RefBases.substring(0, 40))
    cons.head[String](ConsensusTags.UmiBases) shouldBe "ACC-TGA"
  }

  //////////////////////////////////////////////////////////////////////////////
  // Some negative / filtering tests
  //////////////////////////////////////////////////////////////////////////////

  it should "not emit a consensus when the reads are an RF pair" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val rfPair = builder.addPair(
      contig=0, start1=100, start2=135, strand1=Minus, strand2=Plus, attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)
    caller.consensusReadsFromSamRecords(rfPair) shouldBe Seq()
  }

  it should "not emit a consensus when the reads are a cross-chromosomal chimeric pair" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val crossChromPair = builder.addPair(
      contig=0, start1=100, start2=135, attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)
    crossChromPair.head.refIndex = 2
    crossChromPair.last.mateRefIndex = 2
    caller.consensusReadsFromSamRecords(crossChromPair) shouldBe Seq()
  }

  it should "not emit a consensus when the read pair has one mate unmapped" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val caller = new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
    val unmappedMate = builder.addPair(
      contig=0, start1=100, start2=100, unmapped2=true, attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)
    caller.consensusReadsFromSamRecords(unmappedMate) shouldBe Seq()
  }

  it should "not emit a consensus when there are insufficient reads" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    builder.addPair(contig=0, start1=1, start2=11, attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))).tapEach(setReadSequence)
    builder.addPair(contig=0, start1=1, start2=11, attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))).tapEach(setReadSequence)
    val raw = builder.toSeq

    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=2, minDuplexLength=1)
      .consensusReadsFromSamRecords(raw) should have length 1

    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=3, minDuplexLength=1)
      .consensusReadsFromSamRecords(raw) shouldBe Seq()
  }

  it should "not emit a consensus when there is insufficient overlap between R1 and R2" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val raw = builder.addPair(contig=0, start1=1, start2=11, attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))).tapEach(setReadSequence)

    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=20)
      .consensusReadsFromSamRecords(raw) should have length 1

    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=21)
      .consensusReadsFromSamRecords(raw) shouldBe Seq()
  }

  it should "not emit a consensus when R1's end lands in an indel in R2" in {
    val builder = new SamBuilder(readLength=30, baseQuality=35)
    val raw = builder.addPair(
      contig=0, start1=1, start2=11, cigar1="30M", cigar2="19M2D11M", attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)

    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1)
      .consensusReadsFromSamRecords(raw) shouldBe Seq()
  }

  it should "not emit a consensus when there are a lot of disagreements between strands of the duplex" in {
    val builder = new SamBuilder(readLength=100, baseQuality=35)
    val raw = builder.addPair(
      contig=0, start1=100, start2=100, cigar1="100M", cigar2="100M", attrs=Map(("RX", "ACC-TGA"), ("MI", "hi"))
    ).tapEach(setReadSequence)

    // First that we should get a consensus without modifying the reads
    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1, maxDuplexDisagreements=1, maxDuplexDisagreementRate=0.05)
      .consensusReadsFromSamRecords(raw) should have length 1

    // Now mess up the reads so they disagree a whole bunch
    Seq(5, 16, 27, 33, 67, 98).foreach { i =>
      raw.head.bases(i) = 'A'
      raw.last.bases(i) = 'C'
    }

    // Tests using counts
    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1, maxDuplexDisagreements=6)
      .consensusReadsFromSamRecords(raw) should have length 1
    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1, maxDuplexDisagreements=5)
      .consensusReadsFromSamRecords(raw) should have length 0

    // Tests using rate
    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1, maxDuplexDisagreementRate=0.06)
      .consensusReadsFromSamRecords(raw) should have length 1
    new CodecConsensusCaller(readNamePrefix="codec", minReadsPerStrand=1, minDuplexLength=1, maxDuplexDisagreementRate=0.05999)
      .consensusReadsFromSamRecords(raw) should have length 0
  }

  //////////////////////////////////////////////////////////////////////////////
  // Tests for quality masking
  //////////////////////////////////////////////////////////////////////////////

  "CodecConsensusCaller.maskCodecConsensusQuals" should "mask end qualities" in {
    val caller = new CodecConsensusCaller(readNamePrefix="c", outerBasesLength=7, outerBasesQual=Some(5))
    val read   = duplex(50)
    caller.maskCodecConsensusQuals(read)
    read.quals shouldBe (Array.fill(7)(5) ++ Array.fill(50-7-7)(90) ++ Array.fill(7)(5))
  }

  it should "mask single stranded regions _and_ bases" in {
    val caller = new CodecConsensusCaller(readNamePrefix="c", singleStrandQual=Some(4))

    // By default everything is double-stranded, so go in and add some single-stranded bits
    val read   = duplex(50)
    val ssBases = Set(0, 1, 2, 3, 12, 33, 46, 47, 48, 49)
    ssBases.foreach { idx =>
      read.abConsensus.bases(idx) = 'N'
      read.abConsensus.quals(idx) = 2
    }
    caller.maskCodecConsensusQuals(read)

    read.quals.zipWithIndex.foreach { case (qual, idx) =>
      if (ssBases.contains(idx)) {
        qual shouldBe 4
      }
      else {
        qual shouldBe 90
      }
    }
  }
}
